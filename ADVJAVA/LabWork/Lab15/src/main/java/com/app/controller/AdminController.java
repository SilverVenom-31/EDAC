//Created by @AkhilD on 11/02/2021
package com.app.controller;

import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.FlashMap;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.app.pojos.Location;
import com.app.pojos.PaymentMode;
import com.app.pojos.UserRole;
import com.app.pojos.Vendors;
import com.app.service.IVendorService;

@Controller
@RequestMapping("/admin")
public class AdminController {
	private Vendors v;
	@Autowired
	private IVendorService vendorService;

	@GetMapping("/list")

	public String getVendorList(Model model) {
		model.addAttribute("vList", vendorService.getVendorList());
		return "/admin/list";
	}

	@GetMapping("/delete")
	public String deleteVendorDetails(@RequestParam int vid, RedirectAttributes flashMap) {
		// flashMap is map of flash scoped attributes(i.e visible till the next request
		// comming from same client)
		System.out.println("in delete: " + vid);
		flashMap.addFlashAttribute("message", vendorService.deleteVendorDetails(vid));
		return "redirect:/admin/list";
	}

	// add req handling method to show reg form to the clnt
	@GetMapping("/register")
	// Step 1 (2 way data binding/ form data binding) : Add EMPTY POJO
	// instance(using def constr) in model map
	public String showRegForm(Model modelMap, Vendors v) {
		System.out.println("in show reg form " + modelMap);// {vendor : Vendor empty obj : toString}
//		modelMap.addAttribute("vendor_details", new Vendor());//model(pojo) ----> view layer
		modelMap.addAttribute("paymentModes", PaymentMode.values());
		System.out.println(modelMap);// populated : {vendor_details : Vendor' tostring, payment_mode : enum[])
		return "/admin/register";// Actual view name generated by V.R : /WEB-INF/views/admin/register.jsp
	}

	// add req handling method for processing reg form
	// step 3 : form data(view) ----> POJO (model)
	@PostMapping("/register")
	public String processRegForm(@Valid Vendors v, BindingResult res, RedirectAttributes flashMap, Model modelMap) {
		System.out.println("in process reg form : vendor dtls " + v);
		System.out.println("payment dtls " + v.getPaymentDetails());
		System.out.println("binding result " + res);
		// chk for P.L errors
		if (res.hasErrors()) {
			System.out.println("in P.L validation failure");
			modelMap.addAttribute("paymentModes", PaymentMode.values());
			// forward the clnt to reg form : highlighted with errs
			return "/admin/register";// Actual view name generated by V.R : /WEB-INF/views/admin/register.jsp
		}
		// after inserting the details : redirect clnt to vendor list
		// flashMap.addFlashAttribute("message", vendorService.registerVendor(v));
		
		flashMap.addFlashAttribute("vendor", v);
		return "redirect:/admin/location";
	}

	@GetMapping("/update")
	public String updateVendor(@RequestParam int vid, Model map) {
		System.out.println("in updateVendor");
		Vendors v = vendorService.getVendorDets(vid);
		if (v != null) {
			map.addAttribute("user", v);
			map.addAttribute("paymentModes", PaymentMode.values());
			return "/admin/update";
		}
		return "/admin/list";
	}

	@PostMapping("/update")
	public String processUpdate(@Valid Vendors v, BindingResult bs, RedirectAttributes flashMap, Model modelMap,
			@RequestParam int vid) {
		if (bs.hasErrors()) {
			System.out.println("in P.L validation failure" + bs);
			modelMap.addAttribute("user", v);
			modelMap.addAttribute("paymentModes", PaymentMode.values());
			// forward the clnt to reg form : highlighted with errs
			return "/admin/update";// Actual view name generated by V.R : /WEB-INF/views/admin/register.jsp
		}
		// v.setEmail(vendorService.getVendorDets(vid).getEmail());
		v.setRole(vendorService.getVendorDets(vid).getRole());

		v.setPassword(vendorService.getVendorDets(vid).getPassword());
		System.out.println(v);
		flashMap.addFlashAttribute("message", vendorService.updateVendor(v));
		return "redirect:/admin/list";
	}

	@GetMapping("/location")
	public String getLocationForm(Model map, Location l) {
		System.out.println("in location: " + map);
		Vendors vi = (Vendors) map.getAttribute("vendor");
		System.out.println("in get location: " + vi);
		v = vi;
		map.addAttribute("vendors", v);

		return "/admin/location";

	}

	@PostMapping("/location")
	public String processLocation(@Valid Location l, BindingResult bs, RedirectAttributes flashMap, Model modelMap) {
		System.out.println("in processloc :" + l);
		System.out.println("map: " + modelMap);
		if (bs.hasErrors()) {
			System.out.println("in P.L validation failure" + bs);
			modelMap.addAttribute("location", l);

			// forward the clnt to reg form : highlighted with errs
			return "/admin/location";// Actual view name generated by V.R : /WEB-INF/views/admin/register.jsp
		}

		v.setRole(UserRole.VENDOR);
		System.out.println("after setting vendor in loc: " + v);

		//flashMap.addFlashAttribute("message", vendorService.registerVendor(v));
		
		flashMap.addFlashAttribute("message", vendorService.registerVendorLocation(l,v));
		return "redirect:/admin/list";
	}

}
